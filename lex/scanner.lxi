%{ 	 
#include <stdio.h>
#include <string.h>
int lines = 0;
%} 

%option noyywrap
%option caseless

DIGIT 		[0-9]
WORD		~[A-Za-z0-9 ]*~
NUMBER		[+-]?[1-9][0-9]*|0$
CONST		{WORD}|{NUMBER}
ID 		[a-zA-Z][a-zA-Z0-9_]{0,7}

%%

and     {printf("Reserved word: %s\n", yytext);}
bigger	{printf( "Reserved word: %s\n", yytext);}
else	{printf( "Reserved word: %s\n", yytext);}
for	{printf( "Reserved word: %s\n", yytext);}
smaller	{printf( "Reserved word: %s\n", yytext);}
if	{printf( "Reserved word: %s\n", yytext);}
send	{printf( "Reserved word: %s\n", yytext);}
or	{printf( "Reserved word: %s\n", yytext);}
\#	{printf( "Reserved word: %s\n", yytext);}
\$	{printf( "Reserved word: %s\n", yytext);}
\@	{printf( "Reserved word: %s\n", yytext);}
while	{printf( "Reserved word: %s\n", yytext);}
read	{printf( "Reserved word: %s\n", yytext);}
write	{printf( "Reserved word: %s\n", yytext);}

{ID}	{printf( "Identifier: %s\n", yytext );}

{CONST}	{printf( "Constant: %s\n", yytext );}

";"	{printf( "Separator: %s\n", yytext );}
","	{printf( "Separator: %s\n", yytext );}
"%"	{printf( "Separator: %s\n", yytext );}
"~"	{printf( "Separator: %s\n", yytext );}
"{"	{printf( "Separator: %s\n", yytext );}
"}"	{printf( "Separator: %s\n", yytext );}
"("	{printf( "Separator: %s\n", yytext );}
")"	{printf( "Separator: %s\n", yytext );}
"["	{printf( "Separator: %s\n", yytext );}
"]"	{printf( "Separator: %s\n", yytext );}
" "	{printf( "Separator: %s\n", yytext );}
"<"	{printf( "Separator: %s\n", yytext );}
">"	{printf( "Separator: %s\n", yytext );}

"+"	{printf( "Operator: %s\n", yytext );}
"*"	{printf( "Operator: %s\n", yytext );}
"//"	{printf( "Operator: %s\n", yytext );}
"/."	{printf( "Operator: %s\n", yytext );}
"<="	{printf( "Operator: %s\n", yytext );}




[ \t]+  	{}
[\n]+ {lines++;}

[+-]?0[0-9]* {printf("Illegal constant at line %d\n", lines);}

[a-zA-Z][a-zA-Z0-9]{8,}	{printf("Illegal size of the identifier at line %d\n", lines);}

%%  
int main(int argc, char **argv ) 
{ 
    if ( argc > 1 ) 
    	yyin = fopen(argv[1], "r"); 
    else 
    	yyin = stdin;
	yylex();
}
